import fetch from 'node-fetch';
import { Octokit } from '@octokit/rest';

async function fetchCryptoData() {
  try {
    console.log('Fetching crypto data...');
    const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false');

    if (response.ok) {
      const data = await response.json();
      const currentTime = new Date().toLocaleString();
      const content = `Top 10 Cryptocurrencies (${currentTime}):\n${data.map(crypto => `${crypto.name}: $${crypto.current_price}`).join('\n')}`;

      return { content, currentTime };
    } else {
      throw new Error(`Failed to fetch data from CoinGecko. Status: ${response.status}`);
    }
  } catch (error) {
    console.error('Error in fetchCryptoData:', error);
    throw error;
  }
}

async function pushToGitHub(content, token, username, repository, currentTime) {
  try {
    console.log('Pushing data to GitHub...');
    const octokit = new Octokit({ auth: token });
    const owner = username;
    const repo = repository;
    const branch = 'main';
    const date = currentTime.replace(/[,:]/g, '').split(' ').join('_');

    const contentEncoded = Buffer.from(content).toString('base64');

    const file = await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path: `crypto_data_${date}.txt`,
      message: `Daily Crypto Data Update at ${currentTime}`,
      content: contentEncoded,
      branch,
    });

    console.log('File created:', file.data);
  } catch (error) {
    console.error('Error in pushToGitHub:', error);
    throw error;
  }
}

async function performDailyActivity(token, username, repository) {
  try {
    const { content, currentTime } = await fetchCryptoData();
    console.log('Fetched crypto data:', content);
    
    await pushToGitHub(content, token, username, repository, currentTime);
  } catch (error) {
    console.error('Error during daily activity:', error);
    throw error;
  }
}

async function main() {
  const gitTokens = [
    'token',
    // Add other tokens if needed
  ];

  const username = 'name';
  const repository = 'project';

  for (const token of gitTokens) {
    const index = gitTokens.indexOf(token) + 1;
    console.log(`Running daily activity with token ${index}...`);
    try {
      await performDailyActivity(token, username, repository);
    } catch (error) {
      console.error('Error during daily activity:', error);
      // Handle or log the error as needed
    }
  }
}

main();
